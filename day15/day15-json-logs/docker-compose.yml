version: '3.8'

# Define all the services (containers) that make up our application
services:
  # JSON Log Server - receives and processes logs
  json-server:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: json-log-server
    ports:
      # Map container port 8080 to host port 8080
      # This allows external connections to reach our server
      - "8080:8080"
    environment:
      - PYTHONPATH=/app/src
      - PYTHONUNBUFFERED=1
    volumes:
      # Mount our schemas directory so we can modify schemas without rebuilding
      - ./schemas:/app/schemas:ro
      # Mount logs directory for persistent storage
      - ./logs:/app/logs
    networks:
      - log-network
    restart: unless-stopped
    # Health check to ensure the server is running properly
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; socket.socket().connect(('localhost', 8080))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Log Client - sends sample logs to the server
  log-client:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: json-log-client
    environment:
      - PYTHONPATH=/app/src
      - PYTHONUNBUFFERED=1
      - LOG_SERVER_HOST=json-server
      - LOG_SERVER_PORT=8080
    command: ["python", "src/json_client.py"]
    depends_on:
      # Wait for the server to be healthy before starting the client
      json-server:
        condition: service_healthy
    networks:
      - log-network
    restart: "no"  # Client runs once and exits

  # Frontend Web Interface - provides a UI to view logs
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: json-log-frontend
    ports:
      # Map container port 5000 to host port 5000 for web interface
      - "5000:5000"
    environment:
      - PYTHONPATH=/app/src
      - PYTHONUNBUFFERED=1
      - FLASK_APP=frontend/app.py
      - FLASK_ENV=development
    command: ["python", "frontend/app.py"]
    depends_on:
      - json-server
    networks:
      - log-network
    restart: unless-stopped
    volumes:
      # Mount frontend directory for development
      - ./frontend:/app/frontend

  # Test Runner - executes our test suite
  test-runner:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: json-log-tests
    environment:
      - PYTHONPATH=/app/src
      - PYTHONUNBUFFERED=1
    command: ["python", "-m", "pytest", "tests/", "-v"]
    volumes:
      # Mount test results directory
      - ./test-results:/app/test-results
    networks:
      - log-network
    restart: "no"  # Tests run once and exit

# Define a custom network for our services to communicate
# This creates an isolated network where our containers can find each other by name
networks:
  log-network:
    driver: bridge
    name: json-log-network

# Define persistent storage volumes
volumes:
  log-data:
    name: json-log-data
  test-results:
    name: json-test-results